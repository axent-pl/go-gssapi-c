#!/bin/bash

## This script uses a temporary KDC instance to create test
#  Kerberos keytabs and a credentials cache for use as test
#  vectors.
#
#  The cred cache will contain a TGT with 10000 day lifetime,
#  and a service ticket for rack/foo.golang-auth.io with the same
#  lifetime.
#
#  Keytabs are extracted for rack/foo.golang-auth.io and
#  ruin/bar.golang-auth.io.
#

## run in a new session so we can kill any stragglers easily
#
if [[ -z $MK_TEST_VECTORS_SESSION ]]
then
    export MK_TEST_VECTORS_SESSION=1
    setsid -w $0 "$@"
    exit $?
fi

OUTFILE=/dev/stdout
while getopts "o:" arg
do
    case "${arg}" in
        o)
            OUTFILE="${OPTARG}"
    esac
done


KRB5KDC=${KRB5KDC:-/usr/sbin/krb5kdc}

REALM=GOLANG-AUTH.IO
CLIENT_PRINC=robot
declare -a SERVER_PRINCS
SERVER_PRINCS=(rack/foo.golang-auth.io ruin/bar.golang-auth.io, ruin/bar.golang-auth.io@GOLANG-AUTH.IO)

if ! [[ -e ${KRB5KDC} ]]
then
    echo KDC not found at ${KRB5KDC}.
    echo A Kerberos KDC is required for this script - please install as
    echo /usr/sbin/krb5kdc or set KRB5KDC pointing to the KDC binary.
    exit 1
fi

TMPDIR=$(mktemp -d)

cleanup() {
    PIDS=$(ps -s $$ -o pid= | grep -v $$)
    kill -9 -- ${PIDS} 2>/dev/null
    sleep 2

    if [[ -n $NOCLEAN ]]
    then
        echo Not cleaning ${TMPDIR}
    else
        rm -r ${TMPDIR}
    fi
}

trap cleanup EXIT

export KRB5_CONFIG=${TMPDIR}/krb5.conf
export KRB5_KDC_PROFILE=${TMPDIR}/kdc.conf

KDBDIR=${TMPDIR}/db
mkdir -p ${KDBDIR}

sed "s;%REALM%;${REALM};g" >${KRB5_CONFIG} <<EOF
[libdefaults]
    default_realm = %REALM%

[realms]
    %REALM% = {
        kdc = localhost:8888
        admin_server = localhost:8888
    }
EOF

sed "s;%REALM%;${REALM};g ; s;%DIR%;${KDBDIR};g" >${KRB5_KDC_PROFILE} <<EOF
[kdcdefaults]
    kdc_listen = 8888
    kdc_tcp_listen = 8888

[realms]
    %REALM% = {
        kadmind_port = 1749
        kpasswd_port = 1464
        max_life = 10000d 0h 0m 0s
        max_renewable_life = 10000d 0h 0m 0s
        master_key_type = aes256-cts
        supported_enctypes = aes256-cts:normal aes128-cts:normal
        database_name = %DIR%/principal
        key_stash_file = %DIR%/.k5.%REALM%
        acl_file = %DIR%/kadm5.acl
    }

[logging]
    kdc = STDERR
    admin_server = STDERR
    default = STDERR
    kdc = FILE:%DIR%/kdc.log
    admin_server = FILE:%DIR%/kadmin.log
    default = FILE:%DIR/krb5lib.log
EOF

sed "s;%REALM%;${REALM};g" >${KDBDIR}/kadm5.acl <<EOF
*/admin@%REALM% *
EOF

cat >${TMPDIR}/package.tmpl <<"EOF"
package gssapi

//lint:file-ignore U1000 Ignore all unused code, it's generated

// These test vectors were generated by %TOOL%
// DO NOT EDIT

// ktdata1 is a Kerberos keytab for %SPN1%
var ktdata1 = `%KT1DATA%`
const spname1 = "%SPN1%"

// ktdata2 is a Kerberos keytab for %SPN2%
var ktdata2 = `%KT2DATA%`
const spname2 = "%SPN2%"

// ccdata is a Kerberos credentials cache for client principal %CLIENTPRINC%
// containing a TGT with expiry date in 2051 and a service ticket for
// %SPN1%
var ccdata = `%CCDATA%`
var cliname = "%CLIENTPRINC%"
EOF


## Midnight on Jan 1 2033 UTC: 1988150400 UNIX time
NOW=$(date -u +%s)
LIFETIME=$(( 1988150400 - $NOW ))

kdb5_util create -r ${REALM} -s -P password
kadmin.local addprinc -pw password admin/admin@${REALM}
kadmin.local addprinc -pw password -maxlife 10000d ${CLIENT_PRINC}
for princ in ${SERVER_PRINCS[@]}
do
    ktfile=${TMPDIR}/$(echo ${princ} | sed 's;/;_;g').kt
    kadmin.local addprinc -randkey ${princ}
    kadmin.local ktadd -k ${ktfile} ${princ}
done

krb5kdc -n &
KDCPID=$!

kadmind -nofork &
KADMINDPID=$!

sleep 3

set +x

kt1file=${TMPDIR}/$(echo "${SERVER_PRINCS[0]}" | sed 's;/;_;g' ).kt
kt2file=${TMPDIR}/$(echo "${SERVER_PRINCS[1]}" | sed 's;/;_;g' ).kt
ccfile=${TMPDIR}/${CLIENT_PRINC}.cc

echo 'password' | kinit -c ${ccfile} -l ${LIFETIME}s ${CLIENT_PRINC}
KRB5CCNAME=${ccfile} kvno ${SERVER_PRINCS[0]}
klist -c ${ccfile}

sed " s;%SPN1%;${SERVER_PRINCS[0]}@${REALM};g
      s;%SPN2%;${SERVER_PRINCS[1]}@${REALM};g
      s;%CLIENTPRINC%;${CLIENT_PRINC}@${REALM};g
      s;%KT1DATA%;$(base64 -w 0 ${kt1file});
      s;%KT2DATA%;$(base64 -w 0 ${kt2file});
      s;%CCDATA%;$(base64 -w 0 ${ccfile});
      s;%TOOL%;$0;
    " ${TMPDIR}/package.tmpl > ${OUTFILE}